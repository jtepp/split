//
//  PaymentPaymentView.swift
//  split
//
//  Created by Jacob Tepperman on 2021-05-26.
//

import SwiftUI

struct PaymentPaymentView: View {
    @ObservedObject var amountObj: AmountObject
    @Binding var house: House
    @State var showPicker = false
    @Binding var choice: [Member]
    @State var memoText = String()
    @Binding var tabSelection: Int
    @Binding var amountText: String
    @State var includeTax = false
    @State var taxRate = String(format: "%.0f", UserDefaults.standard.float(forKey: "taxRate"))
    var body: some View {
        VStack {
            VStack {
                if !amountObj.showBulk {
                    HStack {
                    Text("To:")
                        .font(.title)
                        .bold()
                        .foregroundColor(.white)
                    Spacer()
                    Button(action: {
                        showPicker = true
                    }, label: {
                        PickerButton(text: "Tap to Select", choice: $choice)
                            .padding(10)
                            .foregroundColor(.white)
                            .background(
                                RoundedRectangle(cornerRadius: 10)
                                    .fill(
                                        Color("Material")
                                    )
                            )
                    })
                    Spacer()
                }
                .padding()
                .sheet(isPresented: $showPicker, content: {
                    MemberPicker(show: $showPicker, house: $house, choice: $choice, multiple: false)
            })
                }
            }
//            Spacer()
//            if !amountObj.showOverlay {
                AmountField(house: $house, amountObj: amountObj, amountText: $amountText)
                    .padding()
//            } else {
//                Rectangle().fill(Color.clear).frame(height:95)
//            }
            InputField(name: "Memo", text: $memoText)
                .padding()
            HStack {
                Toggle("Include tax", isOn: $includeTax)
                    .font(.body.bold())
                    .padding(.horizontal)
                if includeTax {
                    TextField("0", text: $taxRate)
                        .frame(width: 60)
                        .foregroundColor(.primary)
                        .keyboardType(.decimalPad)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .opacity(0.5)
                        .onChange(of: taxRate) { _ in
                            UserDefaults.standard.set(Float(taxRate) ?? 0, forKey: "taxRate")
                        }
                    Text("%")
                        .padding(.trailing)
                }
            }
            .foregroundColor(.white)
            .padding(.vertical, 10)
            .background(Color("DarkMaterial").cornerRadius(10))
            .padding()
            
            Spacer()
            Button(action: {
                UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                
                if amountObj.showBulk {
                    amountObj.bulkPeople.forEach { m in
                        Fetch().sendPayment(p: Payment(to: m.name, from: house.members.first(where: { (m) -> Bool in
                            return m.id == UserDefaults.standard.string(forKey: "myId")
                        })?.name ?? "unknown sender", amount: amountObj.bulkValues[m.id]! * ((includeTax ? Float(taxRate) ?? 0.0 : 0.0)/100 + 1), time: Int(NSDate().timeIntervalSince1970), memo: memoText == "" ? "Generated by Bulk split" : memoText, type: .payment), h: house)
                    }
                } else {
                    Fetch().sendPayment(p: Payment(to: choice.first!.name, from: house.members.first(where: { (m) -> Bool in
                        return m.id == UserDefaults.standard.string(forKey: "myId")
                    })?.name ?? "unknown sender", amount: Float(amountText)! * ((includeTax ? Float(taxRate) ?? 0.0 : 0.0)/100 + 1), time: Int(NSDate().timeIntervalSince1970), memo: memoText, type: .payment), h: house)
                }
                
                //clear
                choice = [Member]()
                amountText = ""
                amountObj.clear()
                memoText = ""
                tabSelection = 0
                UIImpactFeedbackGenerator(style: .medium).impactOccurred()
            }, label: {
                HStack {
                    Spacer()
                    Text("Post")
                        .foregroundColor((choice.isEmpty || amountText.isEmpty || !amountText.isNumeric  || validateFloatString(str: $amountText)) && amountObj.bulkValues.values.reduce(0) { a, b in a+b} == 0 ? .clear : .white)
                    Spacer()
                }
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 10)
                            .fill((choice.isEmpty || amountText.isEmpty || !amountText.isNumeric || validateFloatString(str: $amountText)) && amountObj.bulkValues.values.reduce(0) { a, b in a+b} == 0 ? .clear : Color.blue)
                    )
                    .padding()
            })
            .allowsHitTesting(!((choice.isEmpty || amountText.isEmpty || !amountText.isNumeric || validateFloatString(str: $amountText)) && amountObj.bulkValues.values.reduce(0) { a, b in a+b} == 0))
        }
    }
}


struct InputField: View {
    var name: String
    @Binding var text: String
    var small: Bool = false
    var body: some View {
        HStack {
            Text("\(name):")
                .font(.title)
                .bold()
                .foregroundColor(.white)
            Spacer()
            TextField(name, text: $text)
                .opacity(0.5)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .keyboardType(name.lowercased() == "amount" ? .decimalPad : .default)
                
            Spacer()
        }.scaleEffect(small ? 0.8 : 1)
    }
}

struct NSInputField: View {
    var name: String
    @Binding var text: String
    var small: Bool = false
    //var namespace: Namespace.ID
    var body: some View {
        HStack {
            Text("\(name):")
//                .matchedGeometryEffect(id: "\(name)field"), in: namespace)
                .font(.title.bold())
                .foregroundColor(.white)
            Spacer()
            TextField(name, text: $text)
                .opacity(0.5)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .keyboardType(name.lowercased() == "amount" ? .decimalPad : .default)
//                .matchedGeometryEffect(id: "\(name)box", in: namespace, isSource: false)
                
            Spacer()
        }.scaleEffect(small ? 0.8 : 1)
    }
}


//struct PaymentPaymentView_Previews: PreviewProvider {
//    static var previews: some View {
//        ZStack {
//            Color.black.edgesIgnoringSafeArea(.all)
//            PaymentView(house: .constant(.placeholder), tabSelection: .constant(0))
//        }
//    }
//}

func validateFloatString(str: Binding<String>) -> Bool {
    return Float(String(format: "%.2f", Float(str.wrappedValue) ?? 0.00))! == 0.00
}
